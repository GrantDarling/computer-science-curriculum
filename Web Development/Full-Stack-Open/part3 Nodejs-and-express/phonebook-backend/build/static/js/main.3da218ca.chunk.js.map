{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","exportedObject","getAll","axios","get","then","response","data","create","newObject","post","deletePerson","id","delete","updatePerson","person","put","Filter","props","value","filter","onChange","e","setFilter","target","Notification","message","alertType","style","color","fontStyle","fontSize","background","PersonForm","useState","newName","setNewName","newNumber","setNewNumber","newContact","name","number","onSubmit","preventDefault","existingContact","persons","find","some","updatedPerson","originalPerson","JSON","stringify","console","log","window","confirm","personService","initialPersons","setPersons","catch","error","setAlertMessage","setAlertType","setTimeout","updateContact","res","concat","type","Persons","undefined","includes","map","onClick","App","alertMessage","useEffect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3da218ca.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst deletePerson = id => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nconst updatePerson = (id, person) => {\n    const request = axios.put(`${baseUrl}/${id}`, person)\n    return request.then(response => response.data)\n}\n\nconst exportedObject = {\n     getAll,\n     create,\n     deletePerson,\n     updatePerson\n};\n\nexport default exportedObject; ","import React, { useEffect, useState } from 'react';\nimport personService from './services/persons'\n\nconst Filter = (props) => {\n  const handleFilterChange = (e) => {\n    props.setFilter(e.target.value)\n  }\n  return (\n    <p>filter shown with <input value={props.filter} onChange={handleFilterChange} /></p>\n  )\n}\n\nconst Notification = ({ message, alertType }) => {\n  const success = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16,\n    background: 'grey'\n  }\n\n  const error = {\n    color: 'red',\n    fontStyle: 'italic',\n    fontSize: 16,\n    background: ''\n  }\n\n  if (alertType === '') {\n    return null\n  } \n  \n  if (alertType === \"success\") {\n    return (\n      <div style={success}>\n       {message}\n      </div>\n    )\n  } \n  \n  if (alertType === \"error\") {\n    return (\n      <div style={error}>\n       {message}\n      </div>\n    )\n  }\n}\n\nconst PersonForm = (props) => {\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const newContact = { name: newName, number: newNumber, id:'' }\n\n  const updateContact = (id, existingContact) => {\n    const updatedPerson = { name: existingContact.name, number: newContact.number}\n    const originalPerson = JSON.stringify({ name: existingContact.name, number: existingContact.number})\n    console.log(updatedPerson);\n    if (window.confirm(\"Contact already exists, replace the contacts number?\")) {\n      personService\n        .updatePerson(id, updatedPerson)\n        .then(() => {\n          personService\n          .getAll()\n          .then(initialPersons => props.setPersons(initialPersons)) \n        })\n        .catch((error) => {\n          props.setAlertMessage(error);\n          props.setAlertType(\"error\");\n\n          setTimeout(function(){ props.setAlertType('') }, 3000);\n        })\n\n    } else {\n      personService\n        .updatePerson(id, originalPerson)\n        .catch((error) => {\n          console.log(`this: ${error}`)\n        })\n    }\n  }\n\n  const addContact = (e) => {\n    e.preventDefault();\n    const existingContact = props.persons.find( person => person.name === newContact.name ); \n\n    props.persons.some( person => person.name === newContact.name ) \n    ? updateContact(existingContact.id, existingContact)\n    : personService\n        .create(newContact)\n        .then(res => {\n          props.setPersons(props.persons.concat(newContact))\n\n          props.setAlertMessage(`New contact ${newContact.name} added!`);\n          props.setAlertType('success')\n\n          setTimeout(function(){ props.setAlertType('') }, 3000);\n        })\n    \n      setNewName('');\n      setNewNumber('');\n  }\n\n  const handleNameChange = (e) => {\n    setNewName(e.target.value)\n  }\n\n  const handleNumberChange = (e) => {\n    setNewNumber(e.target.value)\n  }\n\n  return (\n    <form onSubmit={addContact}>\n      <div>\n        name:   <input value={newName} onChange={handleNameChange} /> <br />\n        number: <input value={newNumber} onChange={handleNumberChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nconst Persons = (props) => {\n  const filteredPeople = () => {\n    return props.persons.filter(person => {\n      return person.name !== undefined \n      ? (person.name.includes(props.filter))\n      : ''\n    }) \n  }\n\n  return (\n  <>\n    {filteredPeople().map(person => {\n      return <p key={person.id}>{person.name} {person.number} <button onClick={() => props.deletePerson(person.id)}>delete</button></p> \n    })}\n  </>\n  )\n}\n\nconst App = () => {\n\n  const [persons, setPersons] = useState([])\n  const [ filter, setFilter ] = useState('')\n  const [ alertMessage, setAlertMessage ] = useState('')\n  const [ alertType, setAlertType ] = useState('')\n\n  const deletePerson = (id) => {\n    if (window.confirm(\"Delete contact?\")) {\n      personService\n      .deletePerson(id)\n      .then(() => {\n          personService\n          .getAll()\n          .then(initialPersons => setPersons(initialPersons)) \n      })\n    }\n  }\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => setPersons(initialPersons))\n  }, [])\n\n  return (\n    <div>\n      <Notification message={alertMessage} alertType={alertType} />\n      \n      <h2>Phonebook</h2>\n      <Filter persons={persons} setFilter={setFilter} />\n      <PersonForm persons={persons} setPersons={setPersons} setAlertMessage={setAlertMessage} setAlertType={setAlertType} />\n      <h2>Numbers</h2>\n      <Persons persons={persons} filter={filter} deletePerson={(id) => deletePerson(id)} />\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}