What is Meta Programming?
More about the process than they are about writing code or working more efficiently. 

We will look at systems for building and testing your code, and for managing dependencies. 

Build Systems: 

If you write a paper in LaTeX, what are the commands you need to run to produce your paper? 
What about the ones used to run your benchmarks, plot them, and then insert that plot into your paper? 
Or to compile the code provided in the class you’re taking and then running the tests?

For most projects, whether they contain code or not, there is a “build process”. Some sequence of operations 
you need to do to go from your inputs to your outputs. 

These are usually called “build systems”, and there are many of them. Which one you use depends on the task at hand, 
your language of preference, and the size of the project. At their core, they are all very similar though. You define 
a number of dependencies, a number of targets, and rules for going from one to the other.

Tell the build system that you want a particular target.
its job is to find all the transitive dependencies of that target, and then apply the rules to produce intermediate 
targets all the way until the final target has been produced.

make is one of the most common build systems out there, and you will usually find it installed on pretty much any UNIX-based computer. 
It has its warts, but works quite well for simple-to-moderate projects. 

When you run make, it consults a file called Makefile in the current directory. All the targets, their dependencies, and the rules are 
defined in that file. Let’s take a look at one:

paper.pdf: paper.tex plot-data.png
	pdflatex paper.tex

plot-%.png: %.dat plot.py
	./plot.py -i $*.dat -o $@

Each directive in this file is a rule for how to produce the left-hand side using the right-hand side. 
Or, phrased differently, the things named on the right-hand side are dependencies, and the left-hand side is the target. 


Dependency Management

At a more macro level, your software projects are likely to have dependencies that are themselves projects. 
You might depend on installed programs (like python), system packages (like openssl), or libraries within your 
programming language (like matplotlib). These days, most dependencies will be available through a repository that 
hosts a large number of such dependencies in a single place, and provides a convenient mechanism for installing them. 
Some examples include the Ubuntu package repositories for Ubuntu system packages, which you access through the apt tool, 
RubyGems for Ruby libraries, PyPi for Python libraries, or the Arch User Repository for Arch Linux user-contributed packages.

Versioning:

Usually something like 8.1.3 or 64.1.20192004

They are often, but not always, numerical. Version numbers serve many purposes, and one of the most important of them 
is to ensure that software keeps working

With semantic versioning, every version number is of the form: major.minor.patch. 
The rules are:
    - If a new release does not change the API, increase the patch version.
    - If you add to your API in a backwards-compatible way, increase the minor version.
    - If you change the API in a non-backwards-compatible way, increase the major version.

This already provides some major advantages. Now, if my project depends on your project, it should be safe to use the latest 
release with the same major version as the one I built against when I developed it, as long as its minor version is at least 
what it was back then.

When working with dependency management systems, you may also come across the notion of lock files. A lock file is simply a file 
that lists the exact version you are currently depending on of each dependency.

Continuous Integration Systems

Continuous integration, or CI, is an umbrella term for “stuff that runs whenever your code changes”, and there are many companies out there 
that provide various types of CI, often for free for open-source projects. Some of the big ones are Travis CI, Azure Pipelines, and GitHub Actions. 
They all work in roughly the same way: 
    - you add a file to your repository that describes what should happen when various things happen to that repository. 
      By far the most common one is a rule like “when someone pushes code, run the test suite”. 
You might set it up so that you are notified if the test suite stops passing, or so that a little badge appears on your repository as long as the tests pass.

As an example of a CI system, the class website is set up using GitHub Pages. Pages is a CI action that runs the Jekyll blog software on every push to master 
and makes the built site available on a particular GitHub domain. This makes it trivial for us to update the website! We just make our changes locally, commit 
them with git, and then push. CI takes care of the rest.

Testing Terms:

    Test suite: a collective term for all the tests
    Unit test: a “micro-test” that tests a specific feature in isolation
    Integration test: a “macro-test” that runs a larger part of the system to check that different feature or components work together.
    Regression test: a test that implements a particular pattern that previously caused a bug to ensure that the bug does not resurface.
    Mocking: to replace a function, module, or type with a fake implementation to avoid testing unrelated functionality. 
             For example, you might “mock the network” or “mock the disk”.
             